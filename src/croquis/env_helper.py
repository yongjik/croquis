# Helper for handling different environments.
#
# We're in the "dev environment", if we're running directly on the source tree.
# We distinguish it by trying to find lib/is_nodev.py, which is dynamically
# generated by setup.py (hence is missing in the dev environment).  Inside the
# dev environment, we enable extra logging to help debugging.

import os
import sys

if os.environ.get('CROQUIS_UNITTEST'):
    ENV = 'unittest'
else:
    try:
        from .lib import is_nodev
        ENV = 'deployed'
    except ImportError:
        ENV = 'dev'

# Check that we're running inside ipython.
# (For now, running outside ipython is only for internal testing.)
if ENV == 'unittest':
    HAS_IPYTHON = False
else:
    try:
        get_ipython()
        HAS_IPYTHON = True
    except NameError:
        HAS_IPYTHON = False
        print(
'''*** IPython not detected: croquis requires IPython to run.
*** Most functionality will not work outside of IPython.
''',
              file=sys.stderr)

if ENV == 'dev':
    import notebook.nbextensions

    # Tell Jupyter to import our nbextension.
    # (In non-dev environment, this should have been handled at package
    # installation time: see setup.py.)
    curdir = os.path.dirname(os.path.realpath(__file__))
    notebook.nbextensions.install_nbextension(
        os.path.join(curdir, '../js/croquis_fe.css'),
        destination='croquis_fe_dev.css',
        user=True, symlink=True, overwrite=True)
    notebook.nbextensions.install_nbextension(
        os.path.join(curdir, '../js/croquis_fe.js'),
        destination='croquis_fe_dev.js',
        user=True, symlink=True, overwrite=True)

def is_dev(): return ENV == 'dev'
def has_ipython(): return HAS_IPYTHON
