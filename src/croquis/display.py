# Helper class for interfacing with IPython display API.

import uuid
from dataclasses import dataclass, field

import IPython.display

# Must match //src/js/src/index.ts
MIME_TYPE = "application/vnd.croquis+json"

# Encapsulates a canvas output, with a unique "canvas ID" (which is our own -
# shouldn't be confused with anything IPython does).
@dataclass
class DisplayObj:
    # `debug=True` enables these buttons for FE debugging:
    #
    #     * Record: Start recording events and logs into the internal buffer.
    #     * Stop: Stop recording.
    #     * Save: Save the recorded events and logs to a file.
    #     * Load: Load the saved events from a previous run.
    #     * Replay: Start replaying the events generated by either "Record" or
    #               "Load".
    #     * Clear: Clear the internal buffer.
    #
    # Load/Replay buttons were added to debug the highlight algorithm (i.e.,
    # "Why does it not highlight line #3 when the cursor is on top of it?"), but
    # the code is very haphazard - there's no guarantee that they may work.
    #
    # See `EventReplayer` in croquis_fe.js for details.
    debug: bool = False

    canvas_id: str = field(init=False)

    def __post_init__(self):
        # Create a random "unique" ID.
        #
        # We add a prefix, because document.querySelector() in js doesn't like
        # ID's starting with a digit.  (Well, weirdly, jquery seems to work just
        # fine with these IDs, so YMMV...)
        self.canvas_id = 'v-' + str(uuid.uuid4())
        if self.debug: self.canvas_id += "-dbg"

    def register_handler(self, msgtype, callback):
        from .comm import comm_manager

        comm_manager.register_handler(self.canvas_id, msgtype, callback)

    def _repr_mimebundle_(self, **kwargs):
        from .comm import get_BE_uuid
        from .env_helper import kernel_id

        return {
            "text/plain": f"Croquis graph output ({self.canvas_id})",
            MIME_TYPE: {
                "kernel_id": kernel_id(),
                "BE_id": get_BE_uuid(),
                "ctxt_id": self.canvas_id,
            },
        }

    def show(self):
        IPython.display.display(self)
